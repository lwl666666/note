Git 基础知识入门 
摘要：此教程面向未接触git或未接触版本系统的新人，主要介绍一些git的特性和优点，最后总结了一些git的常用操作

    刚进入BES项目不久，发现项目用的版本工具是git，但有许多和我一起进项目的小伙伴对git好像知之甚少，在这我就对git做一些简单的知识分享。
    Git，号称当前世界上最好用的分布式版本管理系统。对，没有之一。是不是很高端大气上档次。那么在说Git之前我们先给没有接触过版本控制系统的同学说一说什么是版本控制系统。
    版本控制系统顾名思义就是控制版本的系统，但估计可能这样说大多数同学还不是很懂，那么我们来举个例子。比方说现在你要做一个程序。第一天客户给了你一个需求，你根据这个需求写了一段代码。第二天客户又提了一个功能，你又完成了一段对应的代码。而你呢，没有代码备份的习惯。就这样一直到了一个月后，这天客户突然要求，之前前几天的功能不要了或者要修改。这时你怎么办，这时你的心里肯定是，但表面上还是要保持镇静。首先你要回想起这几天你写了哪些代码，这些代码有没有影响之前写的功能，还有根据客户的新需求修改你的代码。一轮改下来可能你已经累趴在键盘上。可如果这时有个工具告诉你说，不用担心，我可以帮你回到几天前的代码的版本，这时你是不是很开心。这就是版本控制工具的功能之一。又过了几天，客户来了一个大需求，你一个人忙不过来了，这时老板安排了小明来协助你，可你写了这么多天的代码，小明这个小菜鸟加进来，改了你的代码出现了重大BUG，关键他还想不起来改了啥，这时你说你气不气。这时就又是版本控制系统大发神威的时候了，他能很清楚的罗列出小明什么时间写了什么代码，这时你就能根据这些记录很容易的锁定到问题点。是不是有了版本控制工具极大的提高了开发效率。而git更是其中的佼佼者。
    git是分布式的版本控制系统，可能有的同学学过SVN，SVN是集中式的版本控制系统。这两者之间有什么区别呢，集中式的系统只有一个存在远端主机的仓库，所有用户都通过网络下载和提交文件到这个远端仓库，如果没有网络的话你将无法使用SVN这类的版本管理系统，同时因为依靠网络，如果在局域网还好，如果连接的远程网络且网络不佳的话，提交文件将是一项"体力活"，而且如果中央主机的仓库出了问题，所有的用户都将无法访问仓库。而git分布式的版本控制系统他会在每个用户的电脑上创建一个完整的版本库，每个人只需要把修改提交到自身电脑的版本库上，其他人的版本库出现了问题将不会影响到你，而两个人只需把修改推送到对方的版本仓库，就可以互相查看到对方的修改了，但也有这样的场景，你的同事今天生病了没来，而你急需他的修改后的版本。这时往往git也会有一台机器充当"中央服务器"的角色，他负责接交换大家的修改，但他不是必须的，单纯的只是为了方便。
    以上就是git的大概介绍，下面就是实际的操作了，下面总结了git的基础的知识和常用命令，希望对各位同学有所帮助
    1.初始化一个Git仓库
        git init
    2.工作区和暂存区
        git文件提交的流程是这样的：工作区->暂存区->本地版本仓库->远程仓库
        随时掌握工作区的状态：git status
        添加工作区的修改到暂存区：git add -file
        提交暂存区的修改到本地仓库：git commit
        如果git status 告诉你有文件被修改过可以用git diff 查看修改的内容
    3.丢弃修改
        场景1：当你修改了工作区的某个文件，想丢弃这些修改，可以用命令git checkout -file
        场景2：当你把工作区一个已经修改的文件已经提交到暂存区，先用git reset HEAD file回到场景1，接下来请参考场景1。
        场景3：已经提交了修改到版本库，可以使用命令git reset --hard HEAD回到提交前的上一个版本。可以将HEAD换成对应commit id进行各个版本之间的穿梭
        注：HEAD指向的版本就是当前的版本。commit id是每次提交修改的版本索引，可以使用git log查看提交历史。
    4.git的工作流程
        （1）首先git pull拉取远端代码。如果有冲突解决冲突后，再拉取。
        （2）进行修改
        （3）git add把工作区的修改提交到暂存区
        （4）git commit 把暂存区的修改提交到本地仓库
        （5）git push把本地修改推送到远程仓库。（在push之前可以先做一步pull操作，以防在你修改期间有人提交新的修改到远程仓库上）
    5.分支（branch）
        分支是git中最强大的地方所在，分支你可以把他想象平行宇宙，在两个分支之间互不影响，git初始化时会默认创建主分支Master,可以根据开发需要在基于Maste分支的某一版本创建分支用于开发莫一项具体的功能，而开发者在这个分支上开发功能没有完成时不会影响到Master分支上的其他用户，而在功能开发完全之后可以把分支再合并到主Master分支上。大大提高了开发效率。
        git branch 查看分支
        git branch dev  创建分支dev
        git checkout dev 切换分支dev（注意和丢弃修改的命令区分）
        git checkout -b dev 创建并切换分支dev，相当于上面的两个命令合并
        git merge<name> 合并某分支到当前分支
        git branch -d<name>删除分支
        在这我就想推荐一下sourcetree这款可视化工具，在该工具里可以很清楚直观的看到各个分支合并图
    6.其他
        git rm 删除一个文件
        git clone 克隆一个仓库
        git stash 保存工作区现场
        git stash apply 恢复工作区
        ......
    以上就是我对git的一些基础知识的总结和分享，可能有说的不清楚或不对的地方欢迎大家指出，大家共同进步。如果有想深入了解的同学可以关注廖雪峰这个大牛的个人网站，他对git有更加详细的介绍。
